1，对于类而言，哪些是不需要单元测试的？（如硬件相关的数据库、打印机，UI类）
对于公开方法而言，哪些是不需要单元测试的？（accessor/mutator）

2，对于某些待测方法，功能比较简单，单元测试中计算预期值的算法上就是这些待测方法的内部实现，这样测了还有什么意义？

3，编写测试用例的时间往往会和实现代码并重，在工期短的情况下，如何协调这两者？并且以后在修改代码之前要先修改测试用例，也需要时间，这无疑又会影响进度，如何平衡？

4，设计和敏捷的冲突

敏捷的指导原则是，如果没有确定的需求就不要进行预期的设计，免得进入过度设计，直到需求提出，才去重构代码完成新需求的设计。

但是有些时候根据经验，可能推断出来某些东西是会变化的，比如根据code complete中提到的国家税收政策、税率等等，虽然没有确定的需求，但还是可以将变化的东西隔离开来，我觉得这是一种合理的预期设计，不知道和敏捷是否冲突？

另外在为某个类编写TestCase的时候会额外获得为其解耦的好处，实际上也是一种对预期需求的设计，这又是否和敏捷的指导原则冲突？

