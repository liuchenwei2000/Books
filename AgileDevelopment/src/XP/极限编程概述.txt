                                                                                                                                       极限编程概述

极限编程(eXtreme Programming,XP)实践：

1，客户作为团队成员
客户和开发人员在一起紧密的工作，以便于彼此知晓对方所面临的问题，并共同去解决这些问题。
谁是客户？XP团队中的客户是指定义产品的特性并排列这些特性优先级的人或者团体。

2，用户素材
用户素材就是正在进行的关于需求谈话的助记符。它是一个计划工具，客户可以使用它的优先级和估算代价来安排实现该需求的时间。

3，短交付周期
XP项目每两周交付一次可以工作的软件。每两周的迭代都实现了涉众的一些需求。
在每次迭代结束时，会给涉众演示迭代生成的系统，以得到他们的反馈。
迭代计划：一旦迭代开始，客户就同意不再修改当次迭代中用户素材的定义和优先级。
迭代期间，开发人员可以自由的将用户素材分解成任务，并依据最具有技术和商务意义的顺序来开发这些任务。
发布计划：是由一组客户根据开发人员给出的预算所选择的、排好优先级别的用户素材组成。

4，验收测试
可以以客户指定的验收测试的形式来捕获有关用户素材的细节。用户素材的验收测试是在就要实现该用户素材之前或实现该用户素材的同时进行编写的。
一旦通过一项验收测试，就将该测试加入到已经通过的验收测试集合中，并决不允许该测试再次失败。

5，结对编程
所有的产品代码都是由结对的程序员使用同一台电脑共同完成的。
结对人员中的一位控制键盘并输入代码，另一位观察输入的代码并寻找着代码中的错误和可以改进的地方。
两个人强烈的进行着交互，都全身心的投入到软件的编写中。两人频繁互换角色。结对关系每天至少要改变一次。

6，测试驱动的开发方法
编写所有产品代码的目的都是为了使失败的单元测试能够通过。
首先编写一个单元测试，由于它要测试的功能还不存在，所以它会运行失败。然后，编写代码使测试通过。
编写测试用例和代码之间的更迭速度是很快的，基本上几分钟左右。
测试用例和代码共同演化，其中测试用例循序渐进的对代码的编写进行指导。
作为结果，一个非常完整的测试用例就和代码一次发展起来。程序员可以使用这些测试来检测程序是否正确工作。
如果结对的程序员对代码进行了小的更改，那么他们可以运行测试，以确保更改没有对程序造成任何的破坏。这会非常有利于重构。
当为了使测试用例通过而编写代码时，这样的代码就被定义为可测试的代码。
这样做会强烈的激发你去解除各个模块间的耦合，这样能够独立的对它们进行测试。
因而，以这种方式编写的代码的设计往往耦合性较弱。而面向对象的原则在进行这种解除耦合方面具有巨大的帮助作用。

7，集体所有权
结对编程中的每一对都具有迁出(check out)任何模块并对它进行改进的权利。

8，持续集成
程序员每天会多次迁入(check in)他们的代码并进行集成，规则很简单。第一个迁入的只要完成迁入就可以了，所有其他的人负责代码的合并工作。

9，可持续的开发速度
为了快速的完成开发， 团队必须要以一种可持续的开发速度前进。团队必须保持旺盛的精力和敏锐的警觉，要有意识的保持稳定适中的速度。

10，开放的工作空间
团队在一个开放的房间中一起工作，结对编程的两人坐在相互能够听得到的距离内，每个人都了解对方的工作状态，程序员们都处在适合于激烈的进行讨论的位置上。

11，计划游戏
计划游戏的本质是划分业务人员和开发人员之间的职责。业务人员(也就是客户)决定特性(feature)的重要性，开发人员决定实现一个特性所花费的代价。
在每次发布和每次迭代的开始，开发人员基于在最近一次迭代或者最近一次发布中他们所完成的工作量，为客户提供一个预算。
客户选择那些所需的成本合计起来不超过该预算的用户素材。

12，简单的设计
XP团队使他们的设计尽可能的简单、具有表现力。此外，他们仅仅关注于计划在本次迭代中要完成的用户素材。
他们不会考虑那些未来的用户素材。相反，在一次次的迭代中，他们不断变迁系统设计，使之对正在实现的用户素材而言始终保持在最优状态。

13，重构
代码往往会腐化，随着添加一个又一个的特性，处理一个又一个的错误，代码的结构会逐渐退化。
如果对此置之不理的话，这种退化最终会导致纠结不行难于维护的混乱代码。
XP团队通过经常性的代码重构来扭转这种退化。重构就是在不改变代码行为的前提下，对其进行一系列小的改造，旨在改进系统结构的实践活动。
每个改造都是微不足道的，几乎不值得去做。但是所有的这些改造叠加在一起，就形成了对系统设计和架构显著的改进。
在每次细微的改造之后，我们运行单元测试以确保改造没有造成任何破坏，然后再去做下一次改造。

14，隐喻
它是将整个系统联系在一起的全局视图，它是系统的未来景象，是它使得所有单独模块的位置和外观变得明显直观。
如果模块的外观与整个系统的隐喻不符，那么就知道该模块是错误的。
