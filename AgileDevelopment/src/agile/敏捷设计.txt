                                                                                                                              敏捷设计

拙劣设计的症状

1，僵化性(Rigidity)：设计难以改变。
很难对系统进行改动，即使是简单的改动，因为每个改动都会迫使许多对系统其他部分的其他改动(即使改动了也会有很多编译错)。如果单一的改动会导致有依赖关系的模块中的连锁改动，那么设计就是僵化的。必须要改动的模块越多，设计就越僵化。

2，脆弱性(Fragility)：设计易于遭到破坏。
对系统的改动会导致系统中和改动的地方在概念上无关的许多地方出现问题(即使改动了没有编译错也会有很多运行错)。
在进行一个改动时，程序的许多地方都可能出现问题。常常是，出现新问题的地方与改动的地方并没有概念上的关联。要修正这些问题就又会引出更多的问题。

3，牢固性(Immobility)：设计难以重用。
很难解开系统的纠结，使之成为一些可在其他系统中重用的组件。
设计中包含了对其他系统有用的部分，但是要把这些部分从系统中分离出来所需要的努力和风险是巨大的。

4，粘滞性(Viscosity)：难以做正确的事情。
做正确的事情比做错误的事情要困难。
当面临一个改动时，开发人员常常发现会有很多种改动的方法。其中，一些方法会保持设计；而另外一些会破坏设计(也就是生硬的手法)。当那些可以保持系统设计的方法比那些生硬手法更难应用时，就表明设计具有高的粘滞性。做错误的事情是容易的，但是做正确的事情却很难。我们希望在软件设计中，可以容易的进行那些保持设计的变动。

5，不必要的复杂性(Needless Complexity)：过分设计。
设计中包含有不具任何直接好处的基础结构。
如果设计中包含有当前没有用的组成部分，它就含有不必要的复杂性。当开发人员预测需求的变化，并在软件中放置了处理那些潜在变化的代码时，常常会出现这种情况。为过多的可能性做准备，致使设计中含有绝不会用到的结构，从而变得混乱。一些准备也许会带来回报，但是更多的不会。期间，设计背负着这些不会用到的部分，使软件变得复杂，并且难以理解。

6，不必要的重复(Needless Repetition)：滥用鼠标进行拷贝粘贴。
设计中包含有重复的结构，而该重复的结构本可以使用单一的抽象进行统一。
剪切和粘贴是有用的文本编辑操作，但确实灾难性的代码编辑操作。时常，软件系统都是构建于众多的重复代码片段之上。
当系统中有重复的代码时，对系统进行改动会变得困难。在一个重复的代码体中发现的错误必须要在每个重复体中一一修正。

7，晦涩性(Opacity)：混乱的表达。
很那阅读、理解。没有很好的表现出意图。
为了防止这种情况的发生，开发人员必须要站在代码阅读者的位置，共同努力对他们的代码进行重构，这样代码的阅读者就可以理解代码。


作为软件开发人员，要认识到需求是项目中最不稳定的要素，激发了软件的腐化。
敏捷开发人员知道要做什么，是因为：
1，他们遵循敏捷实践去发现问题；
2，他们应用设计原则去诊断问题；并且
3，他们应用适当的设计模式去解决问题。

敏捷开发人员致力于保持设计尽可能的适当、干净。这不是一个随便的或者暂时性的承诺。敏捷开发人员不是每几周才清洁他们的设计。而是每天、每小时、甚至每分钟都要保持软件尽可能的干净、简单并富有表现力。他们从来不说：稍后我们会回来修正它。他们决不让腐化出现。

敏捷设计是一个过程，不是一个事件。它是一个持续的应用原则、模式以及实践来改进软件的结构和可读性的过程。它致力于保持系统设计在任何时间都尽可能的简单、干净以及富有表现力。


设计中的臭味是一种症状，是可以主观的进行度量的。这些臭味常常是由于违反了这些原则中的一个或者多个而导致的。
敏捷团队应用这些原则来除去臭味。当没有臭味时，他们不会应用这些原则。仅仅因为是一个原则就无条件的去遵循它的做法是错误的。
这些原则不是可以随意在系统中到处喷洒的香水，过分遵循这些原则会导致不必要的复杂性的设计臭味。
