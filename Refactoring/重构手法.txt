                                        重 构 手 法
重构手法：
A，重复代码：
如果在一个以上的地点看到相同的程序结构，则将它们合二为一。
场合：
1，同一个类中的两个函数含有相同的表达式
2，同一父类的两个子类中含有相同的表达式
3，不同的类中含有相同的表达式
B，长函数：
每当感觉需要以注释来说明点什么的时候，就需要把说明的东西写进一个独立的函数，并以其用途命名。
关键不在于函数的长度，而在于函数“做什么”和“怎么做”之间的语义距离。
场合：
如果代码前方有一行注释，这是可将这段代码替换成一个函数，而且可以在注释的基础上给这个函数命名。
条件式和循环也可以提炼，可以讲循环和其内代码提炼到一个独立的函数中。
C，过大类：
含有的实例太多，需要分解到不同的类中。
D，过长参数列：
方法需要足够的数据，但是它不关心这些数据是以什么方式传进方法的。过长的参数列可以使用一个对象来替代进行数据传递。
E，依赖：
若修改某个类或者某个函数总是会引起别的类或者函数发生变化，那么就要把总是一起变化的东西放到一块，保持变化只在一地发生。
F，数据泥团：
某些类中有相同的字段，很多函数中的参数列中具有相同参数，这些总是绑在一起出现的数据都应该放到属于它们自己的对象中。
如果去掉众多数据中的几个，其他数据并没有因此失去意义，那么就应该为这些去掉的数据建立一个对象。
G，switch语句：
switch语句的问题在于重复，若是为它增加一个新的case语句，必须找到所有的switch并修改它们。
面向对象中的多态可以优雅的解决这个问题。大多时候，一旦看到switch语句就应该考虑用多态来替换它。
switch语句经常根据类型码进行选择，需要的是与该类型码相关的函数或类，
所以应该提炼switch语句到一个独立的函数中，再将它搬移到需要多态性的那个类中，
然后使用子类替代类型码，一旦完成这样的继承结构，就可以用多态来替换switch了。
如果只是在单一函数中有些选择示例，那么就不必用多台了。
H，平行继承体系
当为某个class增加一个subclass的时候也必须为另一个class相应增加一个subclass，这是便出现了重复。
消除策略是：让一个继承体系的实体引用另一个继承体系的实体。
I，对客户端程序员没有用处的类要封装成为内部类。
                                        
