千万不要掩盖异常


在处理先前抛出之异常时，如果catch区段或finally区段又抛出异常，某些异常会因此被掩盖，只剩最后生成的那个异常才会被传播给调用端。
如果想知道造成函数失败的罪魁祸首，则最好不要掩盖异常。掩盖异常示例见 HiddenException.java。

如果发生异常，控制流转移到某个catch区段或finally区段，而那里又产生了新的异常，该怎么办？
一个解决方法是：
保存一个list，用以包含所有异常，然后抛出一个新异常，其中持有一个引用指向上述list。
采用这个办法，新异常的接受者就拥有了全部异常信息，并且不会丢失关键异常信息。示例见NotHiddenException.java。

如果对这个问题考虑不周，就会带来一些负面后果，主要是丢失原始异常，而且处理最终被抛出之异常的代码对此前抛出的所有异常毫不知情。
如果代码视图根据异常进行恢复，却对发生过的其他异常一无所知，则是极为不利的。

try、catch和finally区段可以彼此任意嵌套，此外，尽管从它们之中抛出了多个异常，但只有一个异常可被传播到外界。
最后被抛出的异常是唯一被调用端接收到的异常，其他异常都被掩盖而后遗失了。
如果调用端需要知道造成失败的初始原因，程序之中就绝不能掩盖任何异常。
