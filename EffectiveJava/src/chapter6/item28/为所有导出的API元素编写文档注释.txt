                                                                                                             为所有导出的API元素编写文档注释


为了正确的编写API文档，你必须在每一个被导出的类、接口、构造函数、方法和域声明之前增加一个文档注释。
为了编写出可维护的代码，也应该为那些没有被导出的类、接口、构造函数、方法和域编写文档注释。

每一个方法的文档注释应该简洁的描述出它和客户之间的约定。
这个约定应该说明了这个方法做了什么，而不是说明它是如何完成这项工作的。(除了专门为了继承而设计的类中的方法是例外情况外)
文档注释应该列举出这个方法所有的前提条件和后置条件，
所谓前提条件是指为了使客户能够调用这个方法，而必须要满足的条件；所谓后置条件是指在调用成功完成之后，哪些条件必须要满足。
典型情况下，前提条件下是由@throws标签所隐含描述的(针对那些未被检查的异常)；每一个未被检查的异常都对应着一个被违背的前提条件。
同样的，也可以在一些受影响的参数的@param标记中指定前提条件。
除了前提条件和后置条件之外，每一个方法也应该在文档中描述它的副作用(side effect)。
所谓副作用，是指系统状态中一个可观察到的变化，它不是为了获得后置条件而要求的变化。

为了完整的描述一个方法的约定，方法的文档注释应该对每一个参数都有一个@param标签，以及一个@return标签(除了void方法)，
以及对于该方法抛出的每一个异常，无论是被检查的还是未被检查的，都有一个@throws标签。
按照惯例跟在@param标签或者@return标签后面的文字应该是一个名词短语，描述了这个参数或者返回值所表示的值。
跟在@throws标签之后的文字应该包含单词if，紧接着是一个名词短语，它描述了这个异常将在什么样的条件下会被抛出来。
偶尔情况下，也会用算术表达式来代替名词短语。下面的例子是List接口的文档注释演示了所有这些习惯做法：

    /**
     * Returns the element at the specified position in this list.
     *
     * @param index index of the element to return
     * @return the element at the specified position in this list
     * @throws IndexOutOfBoundsException if the index is out of range
     *         (<tt>index &lt; 0 || index &gt;= size()</tt>)
     */
    E get(int index);

这份文档注释中使用了HTML标签，最常用的有：
<p>，用来分割段落；<code>，用于将代码分段；<pre>，用于更长的代码分段。
为了产生HTML元字符，比如小于号(<)、大于号(>)以及与号(&)，转义序列是必要的。
为了产生一个小于号，请使用转义序列"&lt"；大于号"&gt"；与号"@amp"。

每一个文档注释的第一句话是该注释所属元素的概要描述。概要描述必须独立的描述目标实体的功能。
为了避免混淆，同一个类或者接口中，不应该存在两个成员或构造函数具有同样的概要描述。
特别要注意重载的情形，在这种情况下，往往很自然的在描述中使用同样的第一句话。

规范指出，概要描述很少是一个完整的句子。对于方法和构造函数，概要描述应该是一个动词短语，它描述了该方法所执行的动作。
对于类、接口和域，概要描述应该是一个名词短语，它描述了该类或者接口的实例，或者域本身所代表的事物。

Javadoc已经有自动重用，或者继承方法注释的能力了。
如果一个方法并没有文档注释，那么Javadoc将会搜索最为适用的文档注释，接口的文档注释优先于超类的文档注释。
这意味着，一个类可以重用它所表现的接口的文档注释，而不需要拷贝这些注释。
