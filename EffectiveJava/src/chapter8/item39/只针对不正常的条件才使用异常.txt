                                                                  只针对不正常的条件才使用异常


异常只应该被用于不正常的条件，它们永远不应该被用于正常的控制流。理由如下：
1，异常机制的设计初衷是用于不正常的情形，所以很少有JVM实现试图对它们的性能做优化。所以，创建、抛出和捕获异常的开销是很昂贵的。
2，把代码放在try-catch块中反而阻止了现代JVM实现本来可能要执行的某些特定的优化。

一个设计良好的API不应该强迫它的用户为了正常的控制流而使用异常。
如果一个类具有一个状态相关(state-dependent)的方法，即只有在特定条件下才可以被调用的方法，那么这个类往往也应该有一个单独的状态测试(state-testing)方法，即指示是否可以调用状态相关的方法。例如Iterator类由一个状态相关的next方法，对应的状态测试方法为hasNext。

除了提供一个单独的状态测试方法之外，另一种做法是，如果状态相关方法被调用的时候，该对象处于不恰当的状态之中，则它返回一个可被识别的值，比如null。

如何选择上面的两种方法：
1，如果一个对象将会在缺少外部同步的情况下被并发访问，或者可被外界改变状态，那么使用一个可被识别的返回值可能是很有必要的，因为在调用状态测试方法和调用对应的状态相关方法的时间间隔之中，对象的状态有可能会发生变化。
2，如果一个单独的状态测试方法必须重复状态相关方法的工作，那么从性能角度考虑，应该使用可被识别的返回值。
3，如果所有其他方面都是等同的，那么状态测试方法略优先于可被识别的返回值，它提供了更好的可读性，对于使用不当的情形，可能更加易于检测和改正。
