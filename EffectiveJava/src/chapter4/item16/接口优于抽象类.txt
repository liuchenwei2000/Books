                                                                                                                接口优于抽象类

Java有两种机制可以用来定义一个允许多个实现的类型：接口和抽象类。

为了实现一个由抽象类定义的类型，它必须成为抽象类的一个子类。
因为Java只允许单继承，所以抽象类作为类型定义受到了极大的限制。

使用接口的好处：

1，为了实现新的接口，已有的类可以很容易地被修改。
所需要做的是：增加接口要求的方法，并在类的声明上添加implements子句。
一般的，要修改一个已有的类，使它扩展一个新的抽象类，这往往是不可能的。
把抽象类放到类型层次的上部，会间接地伤害到类层次，强迫这个公共祖先的所有后代类都扩展这个新的抽象类，而不管它对于这些后代类是否合适。

2，接口是定义mixin(混合类型)的理想选择。

3，接口使得可以构造出非层次结构的类型框架。
类型层次对于组织某些事物是非常合适的，但是其他有些事物并不能被整齐的组织成一个严格的层次结构。
比如有的人是歌唱家，有的人是作曲家，如果使用抽象类定义这两种类型的话，就无法定义那些既是歌唱家又是作曲家的人了。

4，接口使得安全地增强一个类的功能成为可能。
做法是item14的包装类模式。如果使用抽象类来定义类型，那么这样就使得除了使用继承的手段来增加功能之外，没有别的选择途径。
这样得到的类与包装类相比，功能更差，也更加脆弱。


接口和抽象类的联合使用

可以把接口和抽象类的优点结合起来，对于期望导出的每一个重要接口，都提供一个抽象的骨架实现类。
接口的作用仍然是定义类型，但是骨架实现类负责所有与接口实现相关的工作。
按照惯例，骨架实现类被称为AbstractInterface，Interface是所实现的接口的名字。

骨架实现的优美之处在于，它们为抽象类提供了实现上的帮助，但又没有强加“抽象类被用作类型定义”时候所特有的严格限制。
对于一个接口的大多数实现来讲，扩展骨架实现类是一个很显然的选择，但也只是一个选择而已。
如果一个预先已经定义好的类无法扩展骨架实现类，那么直接手工实现接口就行了。尽管如此，骨架实现类仍然能够有助于接口的实现。
实现这个接口的类可以把对于接口方法的调用，转发到一个内部私有类的实例上，而这个内部私有类扩展了骨架实现类。
这被称为模拟多重继承，它具有多重继承的绝大多数优点，并且避免了相应的缺陷。示例见chapter4.item16.SimulatedMultipleInheritanceDemo。

编写一个骨架实现类相对比较简单，认真研究接口，并且确定哪些方法是最为基本的，其他的方法在实现的时候将以它们为基础。
这些基本方法将是骨架实现类中的抽象方法。然后，必须为接口中所有其他的方法提供具体的实现。


使用抽象类来定义允许多个实现的类型，比使用接口有一个明显的优势：抽象类的演化比接口的演化要容易得多。
如果在后续的发行版本中，希望在抽象类中增加一个新的方法，那么总是可以增加一个具体方法，它包含了一个合理的默认实现。
然后该抽象类的所有已有的子类都自动提供了这个新的方法。对于接口，这是行不通的。
一般要想在一个公有接口中增加一个方法，而不打破现有的、已经在使用这个接口的所有程序，这是不可能的。
在此之前实现该接口的类将会有编译错误。可以在为接口增加新方法的同时，也为骨架实现类增加同样的方法，这样可以在一定程度上减小由此带来的破坏。

设计公有的接口要非常谨慎，一旦一个接口被公开发行，并且已被广泛实现，再想改变这个接口是不可能的。必须在第一次设计的时候就保证接口是正确的。


总结

接口通常是定义具有多个实现的类型的最佳途径，一个例外是：当演化的容易性比灵活性和功能更为重要时。
如果你导入一个重要的接口，也应该考虑同时提供一个骨架实现类。
