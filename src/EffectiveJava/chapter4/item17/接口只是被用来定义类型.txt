                                                             接口只是被用来定义类型


当一个类实现了一个接口的时候，这个接口被用作一个类型(type)，通过此类型可以引用这个类的实例。
因此，一个类实现了一个接口，就表明客户可以对这个类的实例实施某些动作。为了其他任何目的而定义接口是不合适的。

有一种接口被称为常量接口(constant interface)，示例见chapter4.item17.ConstantInterfaceDemo。
这样的接口没有包含任何方法，它只包含静态的final域，每个域都导出一个常量。如果一个类要使用这些常量，它只要实现这个接口，就可以避免用类名来修饰常量名。

常量接口模式是对接口的不良使用。原因如下：

1，一个类要在内部使用某些常量，这纯粹是实现细节。实现一个常量接口，会导致把这样的实现细节泄露到该类的导出API中。
2，实现常量接口对于这个类的用户来讲没有什么价值，反而会使他们糊涂。
3，实现一个接口代表一个承诺：如果在将来的发行版本中，这个类被修改了，它不再需要使用这些常量了，
那么它仍然必须要实现这个接口，以保证二进制兼容性。(即对象的序列化和反序列化问题)

如果要导出常量，可以选择如下几种方案：

1，如果这些常量与某个已有的类或接口紧紧地联系在一起，那么就应该把这些常量添加到这个类或者接口中。比如Integer.MAX_VALUE。
2，如果这些常量可以被看做一个枚举类型的成员，那么应该使用enum。
3，可以使用一个不可被实例化的工具类来导出这些常量，示例见chapter4.item17.ConstantInterfaceDemo。

总之，接口应该只是被用来定义类型的，它们不应该被用来导出常量。