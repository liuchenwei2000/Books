                                                             复合优先于继承


在一个包的内部使用继承是非常安全的，因为子类和超类的实现在同一个程序员的控制之下。
对于专门为了继承而设计、并且具有很好文档说明的类，使用继承也是非常安全的。然而，对于普通的具体类进行跨越包边界的继承，则是非常危险的。


继承打破了封装性。也就是说，一个子类依赖于其超类中特定功能的实现细节。
超类的实现有可能会随着发行版本的不同而有所变化，如果真的发生了变化，则子类可能会被打破，即使它的代码完全没有改变。
具体示例见chapter4.item14.InstrumentedHashSet.java。


造成子类脆弱性的一个相关的原因是，它们的超类在后续版本中可以获得新的方法。
一旦超类增加了这样的新方法，则很可能由于调用这个未被子类改写的新方法而造成漏洞。
如果在扩展一个类的时候，仅仅是增加新的方法，而不是改写已有的方法，这也是存在风险的。
如果超类在后续版本中获得了一个新的方法，并且和子类中的一个方法也有相同的原型特征，只是返回类型不同，这就会有编译错误；
即便是返回类型也相同，那就相当于改写了父类中的新方法，无法保证它遵守父类新方法的约定。


如果不在扩展一个已有的类，而是在新的类中增加一个私有域，它引用了这个已有类的一个实例。
这种设计被称作“复合”。因为原来已有的类变成了新类的一个组成部分。新类中的每个实例方法都可以调用被包含的已有类实例中对应的方法，并返回它的结果。
这称为转发。这样得到的类将会非常稳固，它不依赖于已有类的实现细节。即使已有的类增加了新的方法，也不会影响新的类。
具体实例见chapter4.item14.InstrumentedHashSet2.java。


只有当子类真正是超类的子类型的时候（满足is-a关系的时候），继承才是合适的。如果在本该使用复合的场合使用了继承，则会不必要的暴露实现细节。
这样得到的API会把你限制在原始的实现上，永远限定了你的类的性能。更为严重的是，由于暴露了内部的细节，客户就有可能直接访问这些内部细节。


在决定使用继承而不是复合之前，还需要确定：对于正在试图扩展的类，其API中有没有缺陷。
如果有的话，是否愿意把这些缺陷传播到自己类的API中？继承机制会把超类API的所有缺陷传播到子类中，而复合技术则允许设计一个新的API，从而隐藏这些缺陷。