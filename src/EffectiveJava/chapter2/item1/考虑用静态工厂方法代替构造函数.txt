                                                                                    考虑用静态工厂方法代替构造函数


类可以为它的客户提供一些静态工厂方法，返回的是类的一个实例，来替代构造函数，或者同时也提供一些构造函数。


这种技术的优点：

1，与构造函数不同，静态工厂方法具有名字。
如果一个构造函数的参数并没有确切地描述被返回的对象，那么选用恰当名字的静态工厂方法可以使一个类更易于使用，并且相应的客户代码更易于阅读。
一个类只能有一个原型相同的构造函数，可以通过让参数列表中参数类型的顺序有所不同来区别它们，但这样往往会让用户混淆。
如果一个类看起来需要多个构造函数，并且它们的原型特征相同，
那么就应该考虑用静态工厂方法来代替其中一个或者多个构造函数，并且慎重选择它们的名字以便明显的标示出它们的不同。

2，与构造函数不同，静态工厂方法每次被调用的时候，不要求非得创建一个新的对象。
对于一些非可变类可以使用唯一的一个实例，从而避免创建不必要的重复对象。
如果一个程序要频繁的创建相同的对象，并且创建对象的代价很昂贵，使用这项技术可以极大地提高性能。

3，与构造函数不同，静态工厂方法可以返回一个原返回类型的子类型的对象。
这样在选择被返回对象的类型时就有了更大的灵活性，它的一个应用是：一个API可以返回一个对象，同时又不使该对象的类成为公有的。
以这种方式把具体的实现类隐藏起来，可以得到一个非常简洁的API。
这项技术非常适合于基于接口的框架结构，因为在这样的框架结构中，接口成为静态工厂方法的自然返回类型。
公有的静态工厂方法所返回的对象的类不仅可以是非公有的，而且该类可以随着每次调用而发生变化，这取决于静态工厂方法的参数值。
只要返回类型的子类型，都是允许的。为了增强软件的可维护性，返回对象的类也可以随着不同的发行版本而不同。
静态工厂方法返回的对象所属的类在编写(编译)包含该静态工厂方法的类时可以并不存在，在运行时通过查找注册文件的方式获取类名信息，
再通过Class.newInstance来实例化这个类，这种灵活的技术是服务提供者框架(service provider framework)的基础。


这种技术的缺点

1，类如果不含公有的或者受保护的构造函数，就不能被子类化。

2，静态工厂方法与其他静态方法没有任何区别。
在API文档中，静态工厂方法不会想构造函数那样被明确标示出来，是对规范的背离。
如果遵守标准的命名习惯，就可以将这个缺点减小到最少：
a，valueOf
该方法返回的实例与它的参数具有同样的值，使用这个名字的静态工厂方法是一些非常有效的类型转换操作符。
b，getInstance
返回的实例是由方法的参数来描述的，但是不能够说与参数具有同样的值。


如果没有其他因素强烈的影响选择，那么最好还是简单的使用构造函数，毕竟它是语言提供的规范。