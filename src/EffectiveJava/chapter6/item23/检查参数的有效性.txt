                                                                                                                                           检查参数的有效性


极大多数方法和构造函数都会对于传递给它们的参数值有某些限制，应该在文档中清楚地指明这些限制。
并且在方法体的起始处对参数进行检查，以强迫施加这些限制。
这是一般原则的具体情形，应该在错误发生时尽可能快的检查到这些错误。
如果不能做到这一点，则错误被检测到的可能性就很小，即使检测到错误了，也更加难以断定错误的根源。

如果一个无效的参数值被传递给一个方法，而这个方法在执行之前首先对参数进行了检查，则它很快就会失败，并且清楚地以一个适当的异常指明错误的原因。

对于公有的方法，使用JavaDoc的@throws标签可以使文档记录下"一旦针对参数值的限制被违反之后将会被抛出的异常"。
示例见chapter6.item23.ExceptionDeclarationDemo.java。

对于一个未被导出的方法，作为包的编写者，你可以控制这个方法将在哪些情形下被调用，所以可以，而且也应该确保只有有效的参数值才会被传递进来。
因此，非公有的方法通常应该使用断言来检查它们的参数，而不使用正常的异常检查语句。

有些参数被方法保存起来供以后使用，检查这些参数的有效性尤为重要。构造函数正式代表了这种原则的一种具体情形。
检查构造函数的参数的有效性是非常重要的，这样可以避免构造出来的对象违反了这个类的约束条件。
有个例外是：如果有效性检查工作非常昂贵，或者根本不切实际，并且在计算过程中有效性检查工作也被隐含着完成了。

偶尔情况下，某些计算会针对特定参数隐式的执行有效性检查，但是检查不成功抛出的异常是错误的。
也就是这个异常与你在文档中表明这个方法将抛出的异常并不匹配，此时，你应该使用异常转译技术，将错误的异常转换为正确的异常。

"任何对参数的限制都是一件好事"这个结论是不对的，相反，设计方法时，应该使它们尽可能通用，并切合实际的需要。