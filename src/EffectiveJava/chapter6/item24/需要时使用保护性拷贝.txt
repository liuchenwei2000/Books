                                                                                                                                                                        需要时使用保护性拷贝


假设类的客户会尽一切手段来破坏这个类的约束条件，在这样的前提下，必须保护性的设计程序。
那些对你提供的API产生误解的程序员所编写的代码可能导致各种不可预期的行为，你的类必须能够妥善处理这些问题。
一个无意识的提供了改变对象自身状态的例子见chapter6.item24.DefensiveCopyDemo.java。

对于参数的保护性拷贝并不仅仅在于非可变类。每当编写一个方法或者构造函数时，
如果它要接受客户提供的对象，允许它进入到内部数据结构中，则有必要考虑客户提供的对象是否有可能是可变的。
如果是的话，则考虑你的类是否能够容忍"这个对象在进入到内部数据结构中之后还有可能发生变化"。
如果答案是否定的，那么就必须对对象进行保护性拷贝，并且让拷贝对象而不是原始对象进入到内部数据结构。

在内部组件被返回给客户之前，对它们进行保护性拷贝也是同样的道理。
不管这个类是否为非可变的，在把一个指向内部可变组件的引用返回给客户之前，都要好好考虑是不是应该返回一个保护性拷贝。
对于数组也是如此，不过也可以为它返回一个非可变视图。

如果一个类包含的方法或者构造函数表明它需要接管一个对象的控制权，那么它就无法抵御恶意的客户。
只有当一个类和它的客户之间有双向的信任关系，或者破坏一个类的约束条件不会伤害到除了客户之外的其他对象时，这样的类才是可以接受的。