                                                          谨慎的进行优化

关于优化的深刻真理：优化更容易带来伤害，而不是好处，特别是不成熟的优化。

1，不要因为性能而牺牲合理的结构，努力编写好的程序而不是快的程序。
如果一个好的程序不够快，它的结构将使得它可以被优化。好的程序体现了信息隐藏的原则：
只要有可能，它们就会把设计决定限定在局部的单个模块中，所以单个决定可以被改变，并且不会影响到系统的其他部分。
2，努力避免那些限制性能的设计决定。
当一个系统设计完成之后，其中最难以更改的组件是那些指定了模块之间交互关系以及模块与外界交互关系的组件。
在这些设计组件之中，最主要的是API以及永久数据格式。
3，考虑API设计决定的性能后果。比如：
使一个公有的类型成为可变的，这可能会导致大量不必要的保护性拷贝。
在一个适合使用组合模式的公有类中使用继承，会把这个类与它的超类永久的束缚在一起，从而人为的限制了子类的性能。
在一个API中使用实现类型而不是接口，会把你束缚在一个具体的实现上，即使将来出现更快的实现也无法使用。

一旦已经谨慎的设计了程序，并且产生了一个清晰、简明、结构良好的实现，那么是该考虑优化的时候了(如果此时你对程序的性能不满意)。在每次试图做优化之前和之后，请对性能进行测量。

性能分析工具有助于做出正确的决定：应该把优化的中心放在哪里。
在Java平台上对优化的结果进行测量，比在其他的传统平台上更有必要，因为Java程序设计语言没有一个很强的性能模型，各种原语操作的相对开销并没有明确定义。而且在不同JVM实现，或者不同的发行版本中也都各不相同。

总之，不要费力去编写快速的程序――应该努力编写好的程序，速度自然会随之而来。当设计系统的时候，特别是在设计API和永久数据格式的时候，请考虑性能的因素。如果不够快，则可在性能分析器的帮助下，找到问题的根源，然后设法优化系统中相关的部分。第一个步骤是检查你选择的算法：再多的底层优化也无法弥补算法的选择不当。