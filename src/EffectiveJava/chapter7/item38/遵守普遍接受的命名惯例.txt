                                                                             遵守普遍接受的命名惯例

Java平台有一整套建立的很好的命名惯例，应该尽量少违反这些惯例，如果没有理由的话永远不要违反。
如果一个API违反了这些惯例，它可能会难以使用；如果一个实现违反了它们，它可能会难以维护。
违反惯例都会潜在的给使用这些代码的其他程序员带来困惑和苦恼。

1，包的名字应该是层次状的，用句号分隔每一部分。每一部分包括小写字母和数字(很少使用)。
如果你的包将在你的组织之外被使用，那么包的名字应该以你的组织的Internet域名作为开头，并且顶级域名放在前面，例如com.sun。
标准库和一些可选的库，其名字以java和javax作为开头，它们是这条规则的例外，用户创建的包名不应该以java和javax开头。
包名字的剩余部分应该包括一个或者多个描述该包的组成部分。这些组成部分应该比较简短，通常不超过8个字符。
鼓励使用有意义的缩写形式，例如util代替utilities。只取首字母的缩写形式也是可以接受的，例如awt。
每一个组成部分通常应该由一个单词、或者缩写词组成。

2，类和接口的名字应该包括一个或者多个单词，每个单词的首字母大写。缩写应该尽量避免，除非是一些首字母缩写和一些通用的缩写。
对于首字母缩写，到底应该全部大写还是只有首字母大写，没有统一的说法，建议采用仅仅首字母大写的形式。
这样即使多个首字母缩写形式连续出现，仍然可以区分开一个单词的起始处和结束处。

类通常用一个名词或者名词短语命名，如Timer，接口的命名与类相似，如Comparator，
或者用一个以"-able"或"-ible"结尾的形容词来命名，例如Runnable。

3，方法和域的名字与类和接口的名字遵守相同的字面惯例，只不过方法或者域的名字第一个字母应该小写。
如果一个由首字母缩写组成的单词是一个方法或者域名字的第一个单词，那么它应该是小写形式。
唯一的例外是常量域，它的名字应该包含一个或者多个大写形式的单词，中间由下划线符号分隔开，例如INT_VALUES。
常量域是一个静态final域，它的值是不可变的。

执行某个动作的方法通常用一个动词或者动词短语来命名；
对于返回boolean值的方法，其名字往往以单词"is"开头，后面跟一个名词或名词短语，或者具有形容词功能的任何单词或短语。
对于返回被调用对象的一个非boolean的函数或者属性，则往往用一个名词、名词短语，或者一个以动词"get"开头的动词短语来命名。
比如size、hashCode或者getTime，前两种形式往往会产生可读性更好的代码。
如果一个方法所在的类是一个JavaBean，则强制要求使用以get开头的形式；如果这个类包含一个方法用于设置同样的属性，则建议采用这种形式。
在这种情况下，这两个方法应该被命名为getAttribute和setAttribute。

转换对象类型的方法、返回一个不同类型的独立对象的方法，通常被称为toType，例如toString；
返回一个视图(视图的类型不同于接收对象的类型)的方法通常被称为asType，例如asList；
返回一个与被调用对象同值的原语类型的方法，通常被称为typeValue，例如intValue；
静态工厂的常用名字为valueOf和getInstance。

域名字的语法惯例没有很好的建立起来，boolean类型的域与boolean类型的访问方法很类似，但是省去了初始的"is"，例如initializaed。
其他类型的域通常用名词或者名词短语来命名，局部变量的语法惯例类似于域的语法惯例，但是更弱。

4，局部变量名字的命名惯例与成员名字类似，只不过它也允许缩写，单个字符和短字符序列的意义依赖于局部变量所在的上下文环境。
