                                                          通过接口引用对象

应该优先使用接口而不是类来引用对象。如果有合适的接口存在，那么对参数、返回值、变量和域的声明都应该使用接口类型。只有当创建某个对象的时候，才真正需要引用这个对象的类。

如果养成了使用接口作为类型的习惯，那么程序将会更加灵活。如果决定换一种实现，那么所需要做的全部工作就是改变构造代码中类的名字(或者使用一个不同的静态工厂)。周围所有的代码都可以继续工作，它们并不知道原来的实现类型，所以它们对于这样的变化并不在意。

有一点值得注意：如果原来的实现提供了某种特殊的功能，而这种功能并不是这个接口的通用约定所要求的，并且周围的代码又依赖于这种功能，那么很关键的一点事，新的实现也要提供同样的功能。

如果没有合适的接口存在的话，那么用类而不使用接口来引用一个对象，是完全合适的。比如下面几种情况：
1，值类(value class)
值类很少会有多个实现，它们通常是final的，并且很少有对应的接口。
2，对象属于一个框架，而框架的基本类型是，不是接口
如果一个对象属于一个基于类的框架，那么应该用相关的基类(往往是抽象类)来引用这个对象，而不是用它的实现。
3，一个类实现了一个接口，但是它提供了接口中不存在的额外方法。
如果程序依赖于这些额外的方法，那么这样的类应该只被用来引用它的实例；它永远也不应该被用作参数类型。

一个给定的对象是否具有合适的接口应该是很显然的。如果是的话，那么，使用接口来引用对象会使程序更加灵活；如果不是，则使用类层次结构中提供了所需功能的最高层的类。