                                                          接口优先于反射

反射(reflection)提供了“通过程序来访问关于已加载的类的信息”的能力。
反射允许一个类使用另一个类，即使当前者被编译的时候后者还根本不存在。但是存在如下的缺点：
1，损失了编译时类型检查的好处，也包括异常检查，方法调用只会在运行时失败。
2，要求执行反射访问的代码非常笨拙和冗长，难于阅读。
3，性能损失，一般比普通的访问慢2倍。

反射功能是在设计时刻被使用的，通常，普通应用在运行时刻不应该以反射方式访问对象。

如果只是在很有限的情况下使用反射，对于某些程序，它们用到的类在编译时刻是不可用的，但是在编译时刻存在适当的接口或者超类，通过它们可以引用到这些类。如果是这种情况，那么你可以以反射方式创建实例，然后通过它们的接口或者超类以正常方式访问这些实例。如果存在适当的构造方法不带参数，那么都不需要java.lang.reflect包，Class.newInstance方法就已经提供了所需的功能。

如果编写的程序必须要与编译时刻未知的类一起工作，那么有可能的话，仅仅使用反射机制实例化对象，而访问对象时使用编译时刻已知的某个接口或者超类。