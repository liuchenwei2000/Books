                                                                                        敏捷软件开发概论

敏捷开发：是一种面临迅速变化的需求快速开发软件的能力。

敏捷软件开发宣言：

1，个体和交互胜过过程和工具

合作、沟通以及交互能力要比单纯的编程能力更为重要。

合适的工具对于成功来说是非常重要的。然而，工具的作用可能会被过分地夸大。使用过多的庞大、笨重的工具就像缺少工具一样，都是不好的。

要从小工具开始，尝试一个工具，直到发现它无法适用时才去更换它。不要认为更大的、更好的工具可以自动地帮你做的更好，通常它们造成的障碍要大于带来的帮助。

团队的构建要比环境的构建重要得多。许多团队和管理者就犯了先构建环境，然后期望团队自动凝聚在一起的错误。相反，应该首先致力于构建团队，然后再让团队基于需要来配置环境。


2，可以工作的软件胜过面面俱到的文档

没有文档的软件是一种灾难。过多的文档比过少的文档更糟。编制众多的文档需要花费大量的时间，并且要使这些文档和代码保持同步，就要花费更多的时间。如果文档和代码之间失去同步，那么文档就会变成庞大的、复杂的谎言，会造成重大的误导。

对于团队来说，编写并维护一份系统原理和结构方面的文档将总是一个好主意，但是那份文档应该是短小的并且主题突出的。

在给新的团队成员传授知识方面，最好的两份文档是代码和团队。代码真实地表达了它所做的事情。虽然从代码中提取系统的原理和结构信息可能是困难的，但是代码是唯一没有二义性的信息源。在团队成员的头脑中，保存着时常变化的系统脉络图。人与人之间的交互是把这份脉络图传授给他人的最快最有效的方式。

直到迫切需要并且意义重大时，才来编制文档。


3，客户合作胜过合同谈判

成功的项目需要有序、频繁的客户反馈。不是依赖于合同或者关于工作的陈述，而是让软件的客户和开发团队密切地一起工作，并经常地提供反馈。

项目的需求基本处于一个持续变化的状态。大的变更是很平常的。在这期间，也会出现整个功能块被减掉，而加进来另外一些功能块。成功的关键在于和客户之间真诚的协作，并且合同指导了这种协作，而不是试图去规定项目范围的细节和固定成本下的进度。


4，响应变化胜过遵循计划

响应变化的能力常常决定着一个软件项目的成败。当我们构建计划时，应该确保计划时灵活的并且易于适应商务和技术方面的变化。

计划不能考虑的过远。首先，商务环境很可能会变化，这会引起需求的变动。其次，一旦客户看到系统开始运作，他们很可能会改变需求。最后，即使我们熟悉需求，并且确信它们不会改变，我们仍然不能很好地估算出开发它们需要的时间。

较好的做计划的策略是：为下两周做详细的计划，为下三个月做粗略的计划，再以后就做极为粗糙的计划。我们应该清楚地知道下两周要完成的任务，粗略地了解一下以后三个月要实现的需求。至于系统一年后将要做什么，有一个模糊的想法就行了。由于计划仅仅支配了几周的时间，计划的其余部分仍然保持着灵活性。



敏捷实践区别于重型过程的特征(12原则)

1，最优先要做的是通过尽早的、持续的交付有价值的软件来使客户满意。

初期交付的系统中所包含的功能越少，最终交付的系统的质量就越高。以逐渐增加功能的方式经常性地交付系统和最终质量之间有非常强的相关性。交付得越频繁，最终产品的质量就越高。敏捷实践会尽早地、经常地进行交付。努力在项目刚开始的几周内就交付一个具有基本功能的系统。然后努力坚持每两周就交付一个功能渐增的系统。

如果客户认为目前的功能已经足够了，客户可以选择把这些系统加入到产品中。或者他们可以简单地选择再检查一遍已有的功能，并指出他们想要做的改变。


2，即使到了开发的后期，也欢迎改变需求。敏捷过程利用变化来为客户创造竞争优势。

敏捷过程的参与者不惧怕变化。他们认为改变需求是好的是事情，因为那些改变意味着团队已经学到了很多如何满足市场需要的知识。

敏捷团队会非常努力地保持软件结构的灵活性，这样当需求变化时，对于系统造成的影响是最小的。


3，经常性地交付可以工作的软件，交付的间隔可以从几周到几个月，交付的时间间隔越短越好。

不赞成交付大量的文档或者计划，这些不是真正要交付的东西，关注的目标是交付满足客户需要的软件。


4，在整个项目开发期间，业务人员和开发人员必须天天都在一起工作。

为了能够以敏捷的方式进行项目的开发，客户、开发人员以及涉众之间就必须要进行有意义的、频繁的交互，必须要对软件项目进行持续不断地引导。


5，围绕被激励起来的个人来构建项目。给他们提供所需要的环境和支持，并且信任他们能够完成工作。

在敏捷项目中，人被认为是项目取得成功的最重要的因素。

所有其他的因素――过程、环境、管理等等――都被认为是次要的，并且当它们对于人有负面的影响时，就要对它们进行改变。


6，在团队内部，最具有效果并且富有效率的传递信息的方法，就是面对面的交谈。

团队成员可以去编写文档，如果对于这些文档的需求是迫切并且意义重大的，但是文档不是默认的沟通方式，默认的沟通方式是交谈。


7，工作的软件是首要的进度度量标准。

敏捷项目通过度量当前软件满足客户需求的数量来度量开发进度而不是根据所处的开发阶段、已经编写的文档的多少或者已经创建的基础结构代码的数量来度量开发进度的。


8，敏捷过程提倡可持续性的开发速度。责任人、开发者和用户应该能保持一个长期的、恒定的开发速度。

团队不是以全速启动并试图在项目开发期间维持那个速度；相反他们以快速但是可持续的速度行进。


9，不断地关注优秀的技能和好的设计会增强敏捷能力。

保持软件尽可能的简洁、健壮是快速开发软件的途径。因而所有的敏捷团队成员都致力于只编写他们能够编写的最高质量的代码。他们不会制造混乱然后告诉自己等有了更多的时间时再来清理它们。如果他们在今天制造了混乱，他们会在今天把混乱清理干净。


10，简单――使未完成的工作最大化的艺术――是根本的。

敏捷团队不会试图去创建那些华而不实的系统，他们总是更愿意采用和目标一致的最简单的方法。
他们并不看重对于明天会出现的问题的预测，也不会在今天就对那些问题进行防卫。相反，他们在今天以最高的质量完成最简单的工作，深信如果在明天发生了问题，也会很容易进行处理。


11，最好的架构、需求和设计出自自组织的团队。

敏捷团队的成员共同来解决项目中所有方面的问题。每一个成员都具有项目中所有方面的参与权利。
不存在单一的团队成员对系统构架、需求或者测试负责的情况。整个团队共同承担那些责任，每一个团队成员都能够影响它们。


12，每隔一段时间，团队会在如何才能更有效地工作方面进行反省，然后相应地对自己的行为进行调整。

敏捷团队会不断地对团队的组织方式、规则、规范、关系等进行调整。
敏捷团队知道团队所处的环境在不断地变化，并且知道为了保持团队的敏捷性，就必须要随环境一起变化。