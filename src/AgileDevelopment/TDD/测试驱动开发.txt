                                                                                             测试驱动开发TDD

测试驱动开发(TDD：Test Driven Development)以测试作为开发过程的中心，它要求在编写任何产品代码之前，首先编写用于定义产品代码行为的测试，而编写的产品代码又要以使测试通过为目标。测试驱动开发要求测试可以完全自动化的运行，在对代码进行重构前后必须运行测试。这是一种革命性的开发方法，能够造就简单、清洗、高质量的代码。

TDD可以赋予我们对代码的自信以及对代码进行重构的勇气。采用测试驱动开发，将会得到一套伴随产品代码的详尽的自动化测试集。将来不论出于什么原因(新的需求、变化的需求、性能调整等等)需要对产品代码进行维护时，在这套测试集的辅助下工作，代码将会一直是健壮的。

TDD所追求的目标是：代码整洁可用。

在测试驱动开发中，要这样做：
1，只有自动测试失败时，我们才重写代码。
2，消除重复设计，优化设计代码。

这两条规则实际上蕴含了开发过程中所经历的阶段：
1，不可运行
写一个不能工作的测试程序，一开始它甚至不能编译。
2，可运行
尽快让这个测试程序工作，为此可以在程序中使用一些不合理的方法。
3，重构
消除在让测试程序工作的过程中产生的重复设计，优化设计结构。

编程解决的问题越难，每次测试所覆盖的范围就应该越小。当然也存在一些编程任务不能仅仅(或者根本不可能)由测试程序来驱动开发的情况。举例来说，软件的安全性和并发性。


编写单元测试是一种验证行为，更是一种设计行为。同样，它更是一种编写文档的行为。
编写单元测试避免了相当数量的反馈循环，尤其是功能验证方面的反馈循环。

首先编写测试的好处：

1，最明显的一个影响是程序中的每一项功能都有测试来验证它的操作的正确性。这个测试套件可以给以后的开发提供支援。
无论何时我们因疏忽破坏了某些已有的功能，它就会告诉我们。我们可以向程序中增加功能，或者更改程序结构，而不用担心在这个过程中会破坏重要的东西。
测试告诉我们程序仍然具有正确的行为。这样，我们就可以更自由的对程序进行改进。

2，更重要的是可以迫使我们使用不同的观察点。我们必须从程序调用者的有利视角去观察我们将要编写的程序。
这样我们就会关注程序的功能的同时，直接关注它的接口。通过首先编写测试，我们就可以设计出便于调用的软件。

3，此外还可以迫使我们自己把程序设计为可测试的。把程序设计为易于调用和可测试的，是非常重要的。
为了成为易于调用和可测试的，程序必须和它的周边环境解耦。这样，首先编写测试迫使我们解除软件中的耦合。

4，测试还可以作为一种无价的文档形式。如果想知道如何调用一个函数或者创建一个对象，会有一个测试展示给你看。
测试就像一套范例，它帮助其他程序员了解如何使用代码。这份文档是可编译的、可运行的。它保持最新，它不会撒谎。


单元测试用来验证系统的小的组成单元应该按照所预期的方式工作，但是它们没有验证系统作为一个整体时工作的正确性。
单元测试是用来验证系统中个别机制的白盒测试。验收测试是用来验证系统满足客户需求的黑盒测试。

验收测试由不了解系统内部机制的人编写。验收测试是程序，因此是可以运行的。
然而，通常使用专为应用程序的客户创建的脚本语言来编写验收测试。

验收测试是关于一项特性的最终的文档。一旦客户编写完成了验证一项特性的验收测试，程序员就可以阅读那些验收测试来真正的理解这项特性。
