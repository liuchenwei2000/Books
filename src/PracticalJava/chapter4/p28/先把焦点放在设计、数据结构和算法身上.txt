先把焦点放在设计、数据结构和算法身上


一开始就将劲头放在如何产生更快更小的代码上，这样要求程序员在设计时提前猜测性能问题的症结所在，而此时既没有可执行的代码，也没有测试数据。

如果从良好的设计起步，一旦到了需要修改程序使之运行更快的时候，必要的改动就很容易进行，代价也小。
修改拙劣设计的代码十分费时，也比较容易出错。因此，将精力集中于建立良好可靠的设计，就可以达到性能目标。

产生快捷代码的一个规则是，只优化必要的部分。典型情况下，80%-90%的程序执行时间花费在10%-20%的代码上面。

高效代码与良好的设计、明智的数据结构选择、明智的算法选择三者的密切程度，远大于实现语言的关系。

对Java最有效的性能提升办法，并非使用特定的Java性能技巧，而是使用久经考验、独立于语言之外的设计技术和算法。
只有在你利用适当的数据结构进而算法进行良好的设计，并使用性能评测器获得了可靠的数据之后，才应当使用一些性能技巧。
