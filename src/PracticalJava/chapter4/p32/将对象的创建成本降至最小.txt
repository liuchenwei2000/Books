将对象的创建成本降至最小


在对象构建过程中，为了确保其正确性，以下事件一定会以固定顺序发生：
1.
从堆heap中分配内存，用以存放全部的instance变量以及这个对象连同其父类的实现专属数据。
所谓实现专属数据包括指向class and method data的指针。
2.
对象的instance变量被初始化为其相应的缺省值。
3.
调用欲创建对象的构造函数。
构造函数做的第一件事就是调用父类的构造函数，以此类推，直到Object的构造函数被调用为止。
4.
在执行构造函数方法体之前，所有instance变量的初始赋值语句和初始化区段先获得执行，然后才执行构造函数本体。
于是基类的构造函数最先执行，以此类推，欲创建对象的构造函数最后执行。
这使得任何类的构造函数都能放心大胆的使用其任何基类的instance变量。


创建一个对象要发生这么多事情，建立一个轻型(lightweight)对象就比建立一个重型对象快得多。
所谓轻型对象是指：既不具有长继承链，也不内含许多其他对象。
重型对象恰恰相反，如果一个对象内含多个轻型对象，也可被视为重型对象。


如果通过性能评测，确定性能问题是因重型对象的创建而造成，将有数个选择：
1.
使用懒加载技术。
2.
重新设计这个类，使之瘦身。
3.
如果引发性能问题的那些代码只是用了重型对象的某些部分，请将这个类分解为多个轻型class。
并令对性能要求最高的代码只使用轻型class对象。


记住，以下类特征会增加对象的创建成本：
1.
构造函数中有大量代码。
2.
内含数量众多或体积庞大的对象————它们的初始化将是构造函数的一部分。
3.
太深的继承层次。
