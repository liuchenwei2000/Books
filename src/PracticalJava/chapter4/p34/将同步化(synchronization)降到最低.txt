将同步化(synchronization)降到最低


在撰写多线程程序时，会碰到许多这样的情况：以关键词synchronized限制对共享资源的访问。
关键词synchronized的确是有用和必要的，不过设计类的时候必须了解随之而来的代价。

限制同步机制的使用，对性能有正面效益。但同步动作并非总能轻易消除。
有时候即使不需要同步化，也会用到由类库提供的同步函数。在这种情况下，仍然得为了那些函数获取/释放你并不需要的lock。
要消除这种无谓的同步，有两个选择：
1.
提供一个子类，内含那些函数的非同步版本。

当可以接触到想要替换之synchronized函数的源码时，这条选择才有作用。
这个技术的缺点在于，增加了代码量，以及因为使用更多重型对象而带来的性能降低。
而且由于复制了代码，因此需要更多的维护工作，并增大了.class文件的体积以及程序所需的内存。
2.
使用另一个类，提供非同步函数。

当无法接触源码，或是无法承受额外的体积或内存开销，就只能用这个选择了。

声明synchronized函数，或声明含有synchronized区段的函数，会大大降低执行性能。
无论使用synchronized作函数修饰符，还是在函数中使用synchronized区段，都意味着体积增大。
只有当代码要求同步化，而且理解那么做的代价之后，才使用synchronized函数。
如果整个函数都需要被同步化，则为了产生体积较小且执行速度较快的代码，请优先使用函数修饰符，而不是在函数中使用synchronized区段。