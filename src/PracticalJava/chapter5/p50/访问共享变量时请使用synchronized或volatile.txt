访问共享变量时请使用synchronized或volatile


如果变量(一般指基本型别)在线程之间被共享，那就必须总是正确的访问它们，以确保操控所得的是正确有效的数值。
这是因为：
实例变量存储于主内存中，但Java允许线程保存这些变量的私有专用副本，这样可以使两个线程更高效的运行。
当线程读写这些变量时，它们操作的是私有专用副本，而非主内存中的正本。
私有专用副本只有在特定的同步点才与主内存的正本进行一致化动作。
这样一来，两个线程读写共享变量时就会产生问题，详见Demo.java。

解决方法有两个：
1，通过synchronized函数或者synchronized区段访问共享变量。详见SynchronizedDemo.java。
2，将共享变量声明为volatile。详见VolatileDemo.java。

每一种做法都会迫使变量与主内存中的正本一致化。

1，通过synchronized的方式访问变量，尽管会造成那些代码无法被并发执行，但确实保证了主内存中的变量获得是是的更新。
当受保护代码执行之前获得对象的lock时，主内存会更新；当受保护代码执行完之后释放对象lock时，主内存也会更新。
2，通过volatile的方式，代码可以并发执行，并且保证变量的私有专用副本与主内存内的正本保持一致。
不过这种一致化动作是在每次访问这个变量的时候发生。

只要多个线程共享某些变量，它们就必须采用上述的两种方式进行保护，以维持与主内存的一致化。
