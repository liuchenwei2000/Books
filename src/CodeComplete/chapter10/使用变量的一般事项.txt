                               使用变量的一般事项

要点

数据初始化过程很容易出错，要避免由于非预期的初始值而造成的错误。
最小化每个变量的作用域。把同一变量的引用点集中在一起。把变量限定在子程序或类的范围之内。避免使用全局数据。
把使用相同变量的语句尽可能集中在一起。
早起绑定会减低灵活性，但有助于减少复杂度。晚期绑定可以增加灵活性，同时增加复杂度。
把每个变量用于唯一的用途。


详解

避免产生初始化错误的建议：
1，在声明变量的时候初始化
2，在靠近变量第一次使用的位置初始化它
3，理想情况下，在靠近第一次使用变量的位置声明和定义该变量
4，在可能的情况下使用final
5，特别注意计数器和累加器，在下一次使用这些变量之前不要忘记重置其值
6，在类的构造函数里初始化该类的数据成员
7，一次性初始化常量，用可执行代码来初始化变量


使用作用域的规则：
1，使变量引用局部化
那些饥饿与同一变量多个引用点之间的代码可称为攻击窗口。可能会有新代码加到这种窗口中，不当地修改了这个变量，或者阅读代码的人可能会忘记该变量应有的值。一般而言，把对一个变量的引用局部化，即把引用点尽可能集中在一起总是一种很好的做法。
2，尽可能缩短变量的存活时间，也是为了减小攻击窗口
变量的存活时间起始于引用它的第一条语句，结束于引用它的最后一条语句。


减小作用域的一般原则
1，在循环开始之前再去初始化该循环里使用的变量，而不是在该循环所属的子程序的开始处初始化这些变量
// 在循环所属的子程序开始处初始化变量
void function(){
  int a = 0;
  // do something
  for(...){
    use(a);
  }
}
// 在循环开始之前初始化变量
void function(){
  // do something
  int a = 0;
  for(...){
    use(a);
  }
}
2，直到变量即将被使用时再为其赋值
3，把相关语句放到一起
4，把相关语句组提取成单独的子程序
5，开始时采用最严格的可见性，然后根据需要扩展变量的作用域


绑定时间：把变量和它的值绑定在一起的时间。主要有如下几种：
1，编码时(magic word)，即硬编码
2，编译时，即使用常量给变量赋值
3，加载时，从外部数据源(如数据库)读取数据


为变量指定单一用途
1，每个变量只用于单一用途
2，避免让代码具有隐含含义
把同一个变量用于多个用途的另外一种方式是当变量代表不同事物时让其具有不同的取值集合。
例如变量pageCount的取值可能表示已打印纸张的数量，除非它等于-1，在这种情况下表明有错误发生。
应该避免使用具有这种隐含含义的变量，这种滥用被称为混合耦合。
这样的变量用于两种以上的用途，也就意味着其类型对于其中的任何一项任务而言都是错误的。
使用两个变量保存两种信息，能带来更多的清晰度。
3，确保使用了所有已声明的变量