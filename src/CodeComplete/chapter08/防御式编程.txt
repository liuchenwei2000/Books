                                                   防御式编程




异常

异常是把代码中的错误或异常事件传递给调用方代码的一种特殊手段。
1，用异常通知程序的其他部分，发生了不可忽略的错误
它的优越之处在于它能提供一种无法被忽略的错误通知机制。
2，只有真正例外的情况才抛出异常
异常需要做出一个取舍：一方面它是一种强大的用来处理预料之外的情况的途径，另一方面程序的复杂度会因此增加。由于调用子程序的代码需要了解被调用代码中可能会抛出的异常，因此异常弱化了封装性，同时代码的复杂度也有所增加。
3，不能用异常来推卸责任
不要把本来可以在局部处理掉的错误当成一个未被捕获的异常抛出去。
4，避免在构造函数中抛出异常，除非你在同一地方把它们捕获
5，在恰当的抽象层次抛出异常
子程序应在其接口中展现出一致的抽象，类也是如此。抛出的异常也是程序接口的一部分，和其他具体的数据类型一样。当决定把一个异常传给调用方时，要确保异常的抽象层次与子程序接口的抽象层次是一致的。例如：chapter8.ExceptionDemo.java。
6，在异常消息中加入关于导致异常发生的全部信息
每个异常都是发生在代码抛出异常时所遇到的特殊情况下。这一信息对于读取异常信息的人们来说是很有价值的，因此要确保该消息中含有为理解异常抛出原因所需要的信息。
7，避免使用空的catch语句
要么是try里的代码不同，因为它无故抛出了一个异常；要么是catch里的代码不对，因为它没能处理一个有效的异常。确定一下错误产生的根源，然后修改try或catch二者其一的代码。
8，考虑创建一个集中的异常报告机制
这种机制能够确保异常处理的一致性，为一些与异常有关的信息提供一个集中的存储，如所发生的异常种类、每个异常该被如何处理以及如何格式化异常消息等。


隔离

以防御式编程为目的而进行隔离的一种方法，是把某些接口选定为安全区域的边界。对穿越安全区域边界的数据进行合法性校验，并当数据非法时做出敏锐的反应。
也同样可以在类的层次采用这种方法。类的公用方法可以假设数据是不安全的，它们要负责检查数据并进行清理。一旦类的公用方法接受了数据，那么类的私用方法就可以假定数据都是安全的了。