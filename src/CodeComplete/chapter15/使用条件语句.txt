                               使用条件语句

要点

对于简单的if-else语句，要注意if子句和else子句的顺序，特别是用它来处理大量错误的时候。要确认正常的情况是清晰的。
对于if-then-else语句串和case语句，选择一种最有利于阅读的排序。
为了捕捉错误，可以使用case语句中的default子句，或者使用if-then-else语句串中的最后那个else子句。


详解

简单if-else语句的指导原则：
1，首先写正常代码路径；再处理不常见情况
在编写代码时，要使得正常情况的执行路径在代码中是清晰的。确认那些不常见的情况不会遮掩正常的执行路径。
2，确保对于等量的分支是正确的
不要用<代替<=或用>代替>=。
3，把正常情况的处理放在if里面而不要放在else里面
// 随意处理大量错误的代码
if(status == ERROR) {
  errorType = "FileOpenError";
}else {
  readFile(status);
  if(status == ERROR){
    errorType = "FileReadError";
  }else{
    print();
  }
}

// 系统的处理大量错误的代码
if(status == SUCCESS) {
  readFile(status);
  if(status == SUCCESS) {
    print();
  }else{
    errorType = "FileReadError";
  }
else {
  errorType = "FileOpenError";
}

通过上例可以使人的注意力集中到了阅读代码的主流程上，而不是费力的去理解那些异常处理情况，更易读。
4，让if子句里面有一个有意义的语句
// 空的if子句
if(boolean){
}else {
  // do something
}
这样写看上去很傻，只要把if语句中的boolean值求反然后把else子句中的代码移到if子句中，并且去掉else子句就可以了：
if(!boolean){
  // do something
}


if-then-else语句串(多个else)的指导原则：
1，利用boolean函数调用简化复杂的检测
将if后面的boolean值抽取成方法更易读。
2，把最常用的情况放在最前面
这可以让阅读代码的人为找出正常情况的处理代码而必须要读的处理非正常情况的代码变得更少。
3，确保所有的情况都考虑到了
写一个放在最后的else子句，用出错信息来捕捉那些你不考虑的情况。


case子句

为case选择最有效的排列顺序：
1，按字母顺序或按数字顺序排列各种情况
如果所有情况的重要性都相同，那么就把它们按ABC的顺序加以排列，以便提高可读性，也很容易从中找出某个特定的情况来。
2，把正常的情况放在前面
如果有一个正常的情况和多个异常的情况，那么就把那个正常的情况放在最前面。用注释来说明它是正常情况，而其他的属于非正常情况。
3，按执行频率排列case子句
把最经常执行的情况放在最前面，最不常执行的放在最后。

使用case语句的诀窍

1，简化每种情况对应的操作
使得与每种情况相关的代码短小精悍。简短的情况处理代码会使case语句的结构更加清晰。
如果某种情况执行的操作非常复杂，那么就写一个子程序，并在该情况对应的case子句中调用它，而不要把代码本身放进这一case子句中。
2，不要为了使用case语句而刻意制造一个变量
case语句应该用于处理简单的、容易分类的数据。如果数据并不简单，那么就使用if-then-else语句串。
3，把default子句只用于检查真正的默认情况
有时候只剩下了一种情况需要处理，于是就决定把这种情况编写为default子句。尽管这么做很诱人却很不明智。
你将失去case语句的标号(label)所提供的自动说明功能，而且也丧失了使用default子句检测错误的能力。
这种case语句一定修改很容易损坏。如果你用的是真正的默认情况，那么增加一种新的情况就很容易――只需增加这种情况和相应的代码即可。
但如果你所用的是伪造的默认情况，那么修改起来就会非常困难。
你不得不增加新的情况，很可能还要把它变为新的默认情况，然后把原来用的默认情况改为普通情况。所以还是一开始就使用真正的默认情况吧。
4，利用default子句来检测错误
如果一条case语句中的默认子句既没有用来做其他的处理，按照正常执行顺序也不太可能发生，那么就向里面加入一条诊断消息来检测错误。
5，在Java里，避免代码执行越过一条case子句的末尾
因为在Java中，不会自动的跳出每一种情况的执行，必须在每一种情况中显示的使用break跳出。