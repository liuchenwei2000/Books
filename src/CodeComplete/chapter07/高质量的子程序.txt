                                                  高质量的子程序

子程序(routine)是为实现一个特定的目的而编写的一个可被调用的方法或者过程。

要点

创建子程序最主要的目的是提高程序的可管理性，当然也有其他一些好的理由。其中，节省代码空间只是一个次要原因；提高可读性、可靠性和可修改性等原因都更重要一些。
有时候，把一些简单的操作写成独立的子程序也非常有价值。
子程序可以按照其内聚性分为很多类，而你应该让大多数子程序具有功能上的内聚性，这是最佳的一种内聚性。
子程序的名字是它的质量的指示器。如果名字糟糕但恰如其分，那就说明这个子程序设计的很差劲。如果名字糟糕而且又不准确，那么它就反映不出程序是干什么的。不管怎样，糟糕的名字都意味着程序需要修改。
只有在某个子程序的主要目的是返回由其名字所描述的特定结果时，才应该使用函数。


详解

创建子程序的正当理由
1，降低复杂度
创建子程序的一个最重要的原因，就是为了降低程序的复杂度。可以通过创建子程序来隐藏一些信息，这样你就不必再去考虑这些信息了。当然，在你要编写这个子程序的时候肯定是要考虑他们的。不过一旦程序写好了，你就应该能忘记这些细节，可以直接调用该子程序而无需了解其内部工作细节。创建子程序还有其他一些原因――如缩小代码规模、改善可维护性、提高正确性等――也都是很不错的，但如果没有子程序的抽象能力，我们的智力将根本无法管理复杂的程序。
当内部循环或条件判断的嵌套层次很深时，就意味着需要从子程序中提取出新的子程序了。把嵌套的部分提取出来形成一个独立的子程序，可以降低外围子程序的复杂度。
2，引入中间、易懂的抽象
把一段代码放入一个吗，命名恰当的在程序内，是说明这段代码用意最好的方法之一。
3，避免代码重复
创建子程序最普遍的原因就是为了避免代码重复。事实上，如果在两段子程序内编写相似的代码，就意味着代码分解出现了差错。这时，应该把两段子程序中的程序代码提取出来，将其中的相同部分放入一个基类，然后再把两段程序中的差异代码放入派生类中。还有另一种办法，你也可以把相同的代码放入新的子程序中，再让其余的代码来调用这个子程序。与代码的重复出现相比，让相同的代码只出现一次可以节约空间。代码改动起来也更方便，因为你只需要在一处修改即可。这时的代码也会更可靠，因为为了验证代码的正确性，你只需要检查一处代码。同时，这样做也会使改动更加可靠，因为你可以避免需要做相同的修改时，却做了一些略有不同的修改。
4，支持子类化
覆盖简短而规整的子程序所需新代码的数量，要比覆盖冗长而邋遢的子程序更少。如果你能让可覆盖的子程序保持简单，那你在实现派生类的时候也会减少犯错的几率。
5，隐藏顺序
把处理事件的顺序隐藏起来是一个好主意。把它们隐藏起来，比让它们在系统内到处散布要好得多。
6，提高可移植性
可以用子程序来隔离程序中不可移植的部分，从而明确识别和隔离未来的移植工作。不可移植的部分包括编程语言所提供的非标准功能、对硬件的依赖，以及对操作系统的依赖等。
7，简化复杂的布尔判断
为了理解程序的流程，通常并没有必要去研究那些复杂的布尔逻辑的细节。应该把这些判断放入函数中，以提高代码的可读性，因为：1、这样就把判断的细节放到一边了；2、一个具有描述性的函数名字可以概括出该判断的目的。
8，改善性能
通过使用子程序，你可以只在一个地方优化代码。把代码集中在一处可以更方便的查出哪些代码的运行效率低下。同时，在一处进行的优化，就能使用到(无论是直接调用还是间接调用)该子程序的所有代码都从中受益。把代码集中在一处后，想用更高效的算法来重写代码也更容易做了。


编写有效的子程序时，一个最大的心理障碍是不情愿为一个简单的目的而编写一个简单子程序。经验表明，一个很好而又小巧的子程序会多有用。其一便是它们能够提高其可读性，其二是因为简单的操作常常会变成复杂操作，写成子程序更易于修改。

对子程序而言，内聚性是指子程序中各种操作之间联系的紧密程度。像余弦函数cos()就是极端内聚的，因为整个程序只完成一项功能。目标是让每一个子程序只把一件事做好，不再做任何其他事情。功能上的内聚性是最强也是最好的一种内聚性，也就是说让一个子程序仅执行一项操作。当然，以这种方式来评估内聚性，前提是子程序所执行的操作与其名字相符――如果它还做了其他的操作，那么它就不够内聚，同时其命名也有问题。


好的子程序名字的一些指导原则：
1，描述子程序所做的所有事情
子程序的名字应当描述其所有的输出结果以及副作用(side effects)。如果你写的是有一些副作用的子程序，那就会起出很多又长又笨的名字。解决的方法不是使用某个描述性较弱的子程序名，而应该换一种方式编写程序，直截了当的解决问题而不产生副作用。
2，避免使用无意义的、模糊或表述不清的动词
有些动词的含义非常灵活，可以延伸到涵盖几乎任何含义。像handleCalculation()、performServices()、outputUser()、processInput()和dealWithOutput()这样的子程序名字根本不能说明子程序是做什么的。
3，不要仅通过数字来形成不同的子程序名字
这些名字后面的数字无法显示出子程序所代表的抽象有何不同，因此这些子程序的命名都很糟糕。
4，根据需要确定子程序名字的长度
给子程序命名的重点是尽可能含义清晰，也就是说子程序名的长短要视该名字是否清晰易懂而定。
5，给函数命名时要对返回值有所描述
函数有返回值，所以函数的命名要应该针对其返回值进行。
6，给过程起名时使用语气强烈的动词加宾语的形式
一个具有功能内聚性的过程通常是针对一个对象执行一种操作。过程的名字应该能反映该过程所做的事情，而一个针对某对象执行的操作就需要一个动词加宾语形式的名字。
在面向对象语言中，不用在过程名中加入对象的名字(宾语)，因为对象本身已经包含在调用语句中了。你会用document.print()等语句来调用子程序，而诸如document.printDocument()这样的语句则显得太臃肿，并且当它们在派生类中被调用的时候也容易产生误解，比如check.printDocument()看上去是要打印支票簿而不像是打印支票本身。
7，准确使用对仗词
命名时遵守对仗词的命名规则有助于保持一致性，从而也提高可读性。
8，为常用操作确立命名规则
比如在某系统中，每个对象都有一个唯一标识，那最好对返回对象唯一标识的子程序建立一个命名规则，叫getID()。