                                      重 构 相 关 概 念
重构：对软件内部结构的一种调整，目的是在不改变"软件的可察行为"的前提下，提高其可理解性，降低其修改成本。
重构的目的是使软件更容易被理解和修改，而性能优化往往使代码较难理解。
软件的可察行为：是指最终用户或者客户端程序员都不知道软件发生了变化但是软件功能一如既往。

重构的两个方面：1，添加新功能。2，重构代码。
添加新功能时不应该修改既有代码，只管添加新功能并且通过测试。
重构代码时就不能再添加功能，只管改进程序结构，并且不能添加任何测试(除非发现以前遗漏的东西)

重构的时机：
1，添加新功能时(代码的设计无法帮助我们轻松的添加所需要的新功能)。
2，修改bug时(为了让代码更具可读性)。
3，复审代码时

重构与性能：短期看来，重构的确会使软件变慢，但它使优化阶段中的软件性能调整更容易，最终还是会使软件变快的。

重构的第一步：为即将修改的代码建立一组可靠的测试环境，这些测试必须有自我检验的能力。

代码区块越小，代码的功能就越容易管理，代码的处理和移植也都越轻松。

重构代码时，任何不会被修改的变量都可以被当成参数传入到新的函数，至于会被修改的变量就需格外小心。
如果只有一个变量会被修改，可以把它当作返回值。
                                      
