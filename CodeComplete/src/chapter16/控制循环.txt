                               控制循环

要点

循环很复杂。保持循环简单将有助于别人阅读你的代码。
保持循环简单的技巧包括：
避免使用怪异的循环、减少嵌套层次、让入口和出口一目了然、把内务操作代码放在一处。
循环下标很容易被滥用。因此命名要准确，并且要把它们各自仅用一个用途。
仔细地考虑循环，确认它在每一种情况下都运行正常，并且在所有可能的条件下都能退出。


详解

循环控制
首先，减少能影响该循环各种因素的数量。
其次，把循环内部当做一个子程序看待--把控制尽可能的放在循环体外。
把循环体执行的条件表述清楚。不要让读者看了循环体之后才明白循环的控制，
应该把循环看作是一个黑盒子，外围程序只知道它的控制条件，却不知道它的内容。

进入循环
1，把初始化代码紧放在循环前面，就近原则。
2，用while(true)表示无限循环
你也许有一个不需要终止的循环，或者有一个只在某一事件发生时才终止的循环。
普遍认为while(true)是无限循环的标准写法，也可以使用for(,,)。
3，在适当的情况下多使用for循环
for循环把循环的控制代码集中在一处，从而有助于写成可读性强的循环。
在for循环中，所有相关的代码全都写在循环的顶部，因此修改起来更加容易。
4，在while循环更适用的时候，不要使用for循环，尤其是不要随便用while循环的内容来填充for循环的循环头

处理好循环体
1，用“{}”把循环中的语句括起来
任何时候都要在代码中使用括号，它们不会增加任何运行时间或存储空间，只会增加可读性，防止修改代码时出错。
2，避免空循环
即要避免把循环所处理的代码和检测循环是否终止的代码写在同一行里。例如：
while((input = reader.readInt()) != 0)
{
  ;
}
应该改为有循环体的循环：
do{
  input = reader.readInt();
}while(input != 0)
3，把循环内务操作要么放在循环的开始，要么放在循环的末尾
循环内务操作是指像i=i+1或者j++这样的表达式，它们的主要目的不是完成循环工作，而是控制循环。
一般来说，在循环之前初始化的那些变量，也就是需要在循环内务部分里处理的变量。
4，一个循环只做一件事
循环应该和子程序一样，每个循环只做一件事并且把它做好。
如果用两个循环会导致循环效率低下，而使用一个循环很合适，那么就把代码写成两个循环，并注明可以把它们合并起来以提高效率，然后等测量数据显示程序的这一部分性能低下的时候再去合并它们。

退出循环
1，设法确认循环能够终止
2，使循环终止条件看起来很明显
3，不要为了终止循环而胡乱改动for循环的下标
比如：
for(int i = 0; i <100 ; i++)
{
  // do something
  if(something)
  {
    i = 100;// 这里随便改动了循环下标
  }
  // do something
}
4，避免出现依赖于循环下标最终取值的代码
在循环终止后使用循环下标值是很不好的，更好并且更具自我描述性的做法是：
在循环体内某个适当的地方把这一最终取值1赋给某个变量。
比如：
int i;
for(i = 0; i <100 ; i++)
{
  if(something) {
    break;
  }
}
return i < MAX;

应改为：
boolean found = false;
int i;
for(i = 0; i <100 ; i++)
{
  if(something) {
    found = true;
    break;
  }
}
return found;
5，考虑使用安全计数器
安全计数器是一个变量，在每次循环之后都递增，以便判断该循环的执行次数是不是过多。

提前退出循环
1，考虑在while循环中使用break语句而不用布尔标记
在有些情况下，通过往while循环中加入布尔标记来实现退出循环体，可能使循环变得很难理解。
2，小心那些有很多break散布其中的循环
一个循环包含很多的break，有可能意味着程序员对该循环的结构或对循环在围绕它的代码中的角色缺乏清晰的认识。
在大量使用break的场合中，用一系列的循环而非一个含有多个出口的循环可能会使表达更为清晰。
3，尽量使用带标号的break结构
4，使用break和continue时要小心谨慎
使用break消除了把循环看做黑盒子的可能性。把控制循环推出的条件只写在一条语句里是简化循环的有力手段。
使用break就使阅读代码的人必须去读循环体，才能理解循环是如何控制的。
如果不能证明使用break或者continue的正当性，那么就不要使用它们。

使用循环变量
1，用整数或者枚举类型表示数组和循环的边界，浮点数递增时会有问题
2，在嵌套循环中使用有意义的变量名来提高可读性
如果你用的是二维甚至多维数组，那么就应该用有意义的下标名来明确你的用意。
有意义的数组下标名字既能表明循环的用途，也能表明所访问的那部分数组的用途。
3，用有意义的名字来避免循环下标串话
如果某个循环体内有多于两三行的代码，或者它有可能会增长，或者它位于一组嵌套的循环里面，那么就应该避免使用i、j和k。
4，把循环下标变量的作用域限制在本循环内

循环应该有多长
1，循环要尽可能的短，以便能够一目了然，限制在20行之内
2，把嵌套限制在3层以内
如果嵌套次数超过了这一数字，那么就应该通过把某一部分提取为子程序或者简化控制结构的方式来缩短它。
3，把长循环的内容移到子程序里
4，要让长循环格外清晰
如果是短循环，那么就可以使用break、continue、多个出口、复杂的终止条件等有风险的控制结构。
如果是长循环，那就要给它写一个单一出口，并且要保持退出条件清晰无误。
