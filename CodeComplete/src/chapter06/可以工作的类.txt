                                                  可以工作的类


要点

类的接口应提供一直的抽象。
类的接口应隐藏一些信息——如某个系统接口、某项设计决策、或一些实现细节。
包含往往比继承更为可取——除非要对“是一个/is a”的关系建模。
继承是一种有用的工具，但它却会增加复杂度。
类是管理复杂度的首选工具。


详解


类是由一组数据和子程序构成的集合，这些数据和子程序共同拥有一组内聚的、明确定义的职责。类也可以只是一组子程序构成的集合，这些子程序提供一组内聚的服务，哪怕其中并未涉及共用的数据。

抽象数据类型(ADT:Abstract Data Type)是指一些数据以及对这些数据所进行的操作的集合。这些操作既向程序的其余部分描述了这些数据是怎么样的，也允许程序的其余部分改变这些数据。ADT构成了类/class这一概念的基础。在支持类的编程语言中，可以把每个抽象数据类型用它自己的类实现。类还涉及到继承和多态这两个额外的概念。


良好的类接口

创建高质量的了类，第一步也是最重要的一步，就是创建一个好的接口。这也包括了创建一个可以通过接口来展现的合理的抽象，并确保细节仍被隐藏在抽象背后。类的接口为隐藏在其后的具体实现提供了一种抽象。类的接口应能提供一组明显相关的子程序。如果类的接口不能展现出一种一致的抽象，那么它的内聚性就很弱。对类的抽象进行评估的方法是基于类所具有的公用(public)子程序所构成的集合——即类的接口。

创建类的抽象接口的指导原则：

1，类的接口应该展现一致的抽象层次
把类看做一种用来实现抽象数据类型(ADT)的机制，每一个类都应该实现一个ADT，并且仅实现这个ADT。如果发现某个类实现了不止一个ADT或者不能确定究竟它实现了何种ADT，就应该把这个类重新组织为一个或多个定义更加明确的ADT。详见chapter6.StudentRosterDemo
。
2，一定要理解类所实现的抽象是什么
尤其是对于包装类(wrapper)而言，一定要隐藏实现细节，不必将被包装类的全部接口都体现出来，而要根据包装类自身的抽象来设计接口。详见chapter6.UnremovableListDemo。
3，提供成对的服务
在设计一个类的时候，要检查每一个公用子程序，决定是否需要另一个与其互补的操作。
4，把不相关的信息转移到其他类中
某个类中一半子程序使用着该类的一半数据，而另一半子程序则使用另一半数据。这时其实已经把两个类混在一起使用了，要把它们拆开。
5，谨防在修改时破坏接口的抽象
在对类进行修改和扩展的过程中，常常会发现额外需要的一些功能。这些功能并不十分适应于原有的类接口，可看上去却也很难用另一种方法来实现。
6，不要添加与接口抽象不一致的公用成员
在向类的接口中添加公用(public)子程序时，如果这个子程序与现有接口所提供的抽象不一致，就要换另一种方法来进行修改，以便能够保持抽象的完整性。
7，同时考虑抽象性和内聚性
这两个概念之间的关系非常紧密——一个呈现出很好的抽象的类接口通常也有很高的内聚性。关注类的接口所表现出来的抽象，比关注它的内聚性更有助于深入的理解类的设计。


构造函数

如果可能，应该在所有的构造函数中初始化所有的数据成员。
用private构造函数来强制实现单例属性。
优先采用深克隆，除非论证可行，才采用浅克隆。


创建类的原因
1，为现实世界中的对象建模
为程序中需要建模的每一个现实世界中的对象类型创建一个类，把该对象所需的数据添加到类里面，然后编写一些服务子程序来为对象的行为建模。
2，为抽象的对象建模
所谓的抽象对象并不是一个现实世界中的具体对象，但它却能为另外一些具体的对象提供一种抽象。比如Shape(形状)对象在现实中是不存在的，Circle(圆形)和Square(正方形)都是真实存在的，而Shape则是对其他具体形状的一种抽象。在程序设计中，抽象并不是像Shape一样现成就有，因此必须努力工作以得出一些清晰地抽象，得出恰当的抽象是面向对象设计中的一项主要挑战。
3，降低复杂度
创建一个类来把信息隐藏起来，这样就无须再去考虑它们。当然写这个类的时候还是要考虑这些信息的，但类写好后，就应该能够忘掉这些细节，并能在无须了解其内部工作原理的情况下使用这个类。
4，隔离复杂度
复杂度容易引发错误，一旦错误发生，只要它还在类的局部而未扩散到整个程序中，找到它就会比较容易。修正错误时引起的改动不会影响到其他代码。
5，隐藏实现细节
6，限制变动的影响范围
把容易变动的部分隔离开来，这样就能把变动所带来的影响限制在一个或少数几个类的范围内。
7，隐藏全局数据
如果需要用到全局数据，就可以把它的实现细节隐藏到某个类的接口背后。与直接使用全局数据相比，通过访问器子程序来操控全局数据有很多好处：可以改变数据结构而无须修改程序本身，也可以监视对这些数据的访问。
8，让代码更易用重用
如果有一部分代码，它们只是在程序里的一个地方调用，只要它可以就理解为一个较大类的一部分，而且这部分代码可能会在其他程序中用到，就可以把它提出来形成一个单独的类。
9，把相关操作包装到一起

应该避免的类
1，避免创建万能类
要避免创建什么都知道、什么都能干的万能类。
2，消除无关紧要的类
如果一个类只包含数据但不包含行为的话，那它往往不是一个真正的类。要考虑把这个类降级，让它的数据成员成为一个或多个其他类的属性。
